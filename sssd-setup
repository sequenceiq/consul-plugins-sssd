#!/bin/bash

: ${CONSUL_ADDRESS:="http://consul-8500.service.consul:8500"}
: ${LOGFILE:=/tmp/sssd.log}
: ${BRANCH=master}

CONF_LOCATION="$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)/conf"

 _get-sssd-conf(){
    declare desc="Generates sssd.conf file by the given template"
    declare template="${1}" uri=${2} schema=${3} search=${4} reqcert=${5} ad_server=${6} krb5_server=${7} krb5_realm=${8}
    
    template=${template//%LDAP_URI%/$uri}
    template=${template//%LDAP_SCHEMA%/$schema}
    template=${template//%LDAP_SEARCH_BASE%/$search}
    template=${template//%REQCERT%/$reqcert}
    template=${template//%AD_SERVER%/$ad_server}
    template=${template//%KRB5_SERVER%/$krb5_server}
    echo "${template//%KRB5_REALM%/$krb5_realm}"
}

_get-template(){
    declare desc="Resolve the right template"
    declare kind=${1} branch=${2}
    
    local domain
    if [ -z $branch ]; then
        domain=$(<$CONF_LOCATION/$kind)
    else
        domain=$(curl -s https://raw.githubusercontent.com/sequenceiq/consul-plugins-sssd/$branch/conf/$kind)
    fi
    domain="${domain//$'\n'/\\n}"
    
    local template
    local gsub='{gsub("%DOMAIN%", d)}1'
    if [ -z $branch ]; then
        template=$(awk -v d="${domain}" "${gsub}" $CONF_LOCATION/sssd.conf.template)
    else
        template=$(awk -v d="${domain}" "${gsub}" <(curl -s https://raw.githubusercontent.com/sequenceiq/consul-plugins-sssd/$branch/conf/sssd.conf.template))
    fi
    echo "$template"
}

_save-configuration(){
    declare desc="Persists configuration to disk"
    declare location=$1 content="$2"
    
    mkdir -p $1
    echo "$2" > $1/sssd.conf
}

_get(){
    declare desc="Cut the member of payload"
    declare i=$1 payload="$2"

    echo "$payload" | cut -d" " -f $i
}

debug(){
  echo "[DEBUG] $*" >> $LOGFILE
}

main(){
    debug "Install packages"
    yum install -y sssd openssh-server authconfig
    debug "Generate and persist config file"
    local config_name=$(_get 1 "$PAYLOAD")
    local config
    if [[ -z $config_name ]] || [[ "-" = $config_name ]]; then
        local pl=$PAYLOAD
        local kind=$(_get 2 "$pl") uri=$(_get 3 "$pl") schema=$(_get 4 "$pl") search=$(_get 5 "$pl") reqcert=$(_get 6 "$pl")
        local ad_server=$(_get 7 "$pl") krb5_server=$(_get 8 "$pl") krb5_realm=$(_get 9 "$pl")
        local template=$(_get-template $kind $BRANCH)
        config=$(_get-sssd-conf "$template" $uri $schema $search $reqcert $ad_server $krb5_server $krb5_realm)
    else
        config=$(curl $CONSUL_ADDRESS/v1/kv/$config_name?raw)
    fi
    _save-configuration /etc/sssd "$config"
    chown root:root /etc/sssd/sssd.conf
    chmod 0600 /etc/sssd/sssd.conf
    debug "Reconfigure auth"
    authconfig --enablesssd --enablesssdauth --enablelocauthorize --enablemkhomedir --enablecachecreds --update
    debug "Reconfigure existing service(s)"
    sed -i "s/#initgroups: files/initgroups: files sss/" /etc/nsswitch.conf
    sed -i "s/#Port 22/Port 2022/" /etc/ssh/sshd_config
    debug "Generate missing ssh keys"
    ssh-keygen -A
    debug "Start and enable sshd"
    systemctl enable sshd
    systemctl restart sshd || debug "Systemd not available start sshd in fallback mode" && /usr/sbin/sshd
    debug "Start and enable user sessions"
    mkdir -p /etc/systemd/system/sssd.service.requires
    ln -s /usr/lib/systemd/system/systemd-user-sessions.service /etc/systemd/system/sssd.service.requires/systemd-user-sessions.service
    systemctl start systemd-user-sessions || debug "Systemd not available allow login in a different way" && rm -f /run/nologin
    debug "Start and enable sssd"
    systemctl enable sssd
    systemctl start sssd || debug "Systemd not available start sssd in fallback mode" && sssd --daemon --debug-to-files
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@" || true

debug "Sssd configuration finished"